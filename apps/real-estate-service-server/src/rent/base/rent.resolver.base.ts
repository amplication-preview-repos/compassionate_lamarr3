/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Rent } from "./Rent";
import { RentCountArgs } from "./RentCountArgs";
import { RentFindManyArgs } from "./RentFindManyArgs";
import { RentFindUniqueArgs } from "./RentFindUniqueArgs";
import { CreateRentArgs } from "./CreateRentArgs";
import { UpdateRentArgs } from "./UpdateRentArgs";
import { DeleteRentArgs } from "./DeleteRentArgs";
import { TenantFindManyArgs } from "../../tenant/base/TenantFindManyArgs";
import { Tenant } from "../../tenant/base/Tenant";
import { Property } from "../../property/base/Property";
import { RentService } from "../rent.service";
@graphql.Resolver(() => Rent)
export class RentResolverBase {
  constructor(protected readonly service: RentService) {}

  async _rentsMeta(
    @graphql.Args() args: RentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Rent])
  async rents(@graphql.Args() args: RentFindManyArgs): Promise<Rent[]> {
    return this.service.rents(args);
  }

  @graphql.Query(() => Rent, { nullable: true })
  async rent(@graphql.Args() args: RentFindUniqueArgs): Promise<Rent | null> {
    const result = await this.service.rent(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Rent)
  async createRent(@graphql.Args() args: CreateRentArgs): Promise<Rent> {
    return await this.service.createRent({
      ...args,
      data: {
        ...args.data,

        property: args.data.property
          ? {
              connect: args.data.property,
            }
          : undefined,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Rent)
  async updateRent(@graphql.Args() args: UpdateRentArgs): Promise<Rent | null> {
    try {
      return await this.service.updateRent({
        ...args,
        data: {
          ...args.data,

          property: args.data.property
            ? {
                connect: args.data.property,
              }
            : undefined,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Rent)
  async deleteRent(@graphql.Args() args: DeleteRentArgs): Promise<Rent | null> {
    try {
      return await this.service.deleteRent(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Tenant], { name: "tenants" })
  async findTenants(
    @graphql.Parent() parent: Rent,
    @graphql.Args() args: TenantFindManyArgs
  ): Promise<Tenant[]> {
    const results = await this.service.findTenants(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Property, {
    nullable: true,
    name: "property",
  })
  async getProperty(@graphql.Parent() parent: Rent): Promise<Property | null> {
    const result = await this.service.getProperty(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async getTenant(@graphql.Parent() parent: Rent): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
